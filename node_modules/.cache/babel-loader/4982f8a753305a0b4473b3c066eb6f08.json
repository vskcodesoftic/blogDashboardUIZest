{"ast":null,"code":"import _regeneratorRuntime from \"/Users/codesoftic/Downloads/Zest-Package-1.1.0/zestreact-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/codesoftic/Downloads/Zest-Package-1.1.0/zestreact-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/codesoftic/Downloads/Zest-Package-1.1.0/zestreact-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport var useHttpClient = function useHttpClient() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var activeHttpRequests = useRef([]);\n  var sendRequest = useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(url) {\n      var method,\n          body,\n          headers,\n          httpAbortCtrl,\n          response,\n          responseData,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              method = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'GET';\n              body = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;\n              headers = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n              setIsLoading(true);\n              httpAbortCtrl = new AbortController();\n              activeHttpRequests.current.push(httpAbortCtrl);\n              _context.prev = 6;\n              _context.next = 9;\n              return fetch(url, {\n                method: method,\n                body: body,\n                headers: headers,\n                signal: httpAbortCtrl.signal\n              });\n\n            case 9:\n              response = _context.sent;\n              _context.next = 12;\n              return response.json();\n\n            case 12:\n              responseData = _context.sent;\n              activeHttpRequests.current = activeHttpRequests.current.filter(function (reqCtrl) {\n                return reqCtrl !== httpAbortCtrl;\n              });\n\n              if (response.ok) {\n                _context.next = 16;\n                break;\n              }\n\n              throw new Error(responseData.message);\n\n            case 16:\n              setIsLoading(false);\n              return _context.abrupt(\"return\", responseData);\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](6);\n              setError(_context.t0.message);\n              setIsLoading(false);\n              throw _context.t0;\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 20]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), []);\n\n  var clearError = function clearError() {\n    setError(null);\n  };\n\n  useEffect(function () {\n    return function () {\n      activeHttpRequests.current.forEach(function (abortCtrl) {\n        return abortCtrl.abort();\n      });\n    };\n  }, []);\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest,\n    clearError: clearError\n  };\n};\nexport default useHttpClient;","map":{"version":3,"sources":["/Users/codesoftic/Downloads/Zest-Package-1.1.0/zestreact-app/src/shared/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","clearError","forEach","abortCtrl","abort"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAuD,OAAvD;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,kBACGJ,QAAQ,CAAC,KAAD,CADX;AAAA;AAAA,MACxBK,SADwB;AAAA,MACbC,YADa;;AAAA,mBAELN,QAAQ,EAFH;AAAA;AAAA,MAExBO,KAFwB;AAAA,MAEjBC,QAFiB;;AAG/B,MAAMC,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,MAAMQ,WAAW,GAAGT,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,6BAC3B,iBAAOU,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,MAAZ,2DAAqB,KAArB;AAA4BC,cAAAA,IAA5B,2DAAmC,IAAnC;AAAyCC,cAAAA,OAAzC,2DAAmD,EAAnD;AACIR,cAAAA,YAAY,CAAC,IAAD,CAAZ;AACMS,cAAAA,aAFV,GAE0B,IAAIC,eAAJ,EAF1B;AAGIP,cAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;AAHJ;AAAA;AAAA,qBAM+BI,KAAK,CAACR,GAAD,EAAM;AAC9BC,gBAAAA,MAAM,EAANA,MAD8B;AAE9BC,gBAAAA,IAAI,EAAJA,IAF8B;AAG9BC,gBAAAA,OAAO,EAAPA,OAH8B;AAI9BM,gBAAAA,MAAM,EAAEL,aAAa,CAACK;AAJQ,eAAN,CANpC;;AAAA;AAMcC,cAAAA,QANd;AAAA;AAAA,qBAamCA,QAAQ,CAACC,IAAT,EAbnC;;AAAA;AAacC,cAAAA,YAbd;AAeQd,cAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BO,MAA3B,CACzB,UAACC,OAAD;AAAA,uBAAaA,OAAO,KAAKV,aAAzB;AAAA,eADyB,CAA7B;;AAfR,kBAmBaM,QAAQ,CAACK,EAnBtB;AAAA;AAAA;AAAA;;AAAA,oBAoBkB,IAAIC,KAAJ,CAAUJ,YAAY,CAACK,OAAvB,CApBlB;;AAAA;AAuBQtB,cAAAA,YAAY,CAAC,KAAD,CAAZ;AAvBR,+CAwBeiB,YAxBf;;AAAA;AAAA;AAAA;AA0BQf,cAAAA,QAAQ,CAAC,YAAIoB,OAAL,CAAR;AACAtB,cAAAA,YAAY,CAAC,KAAD,CAAZ;AA3BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD2B;;AAAA;AAAA;AAAA;AAAA,OAgC3B,EAhC2B,CAA/B;;AAmCA,MAAMuB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBrB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAO,YAAM;AACTM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2Ba,OAA3B,CAAmC,UAACC,SAAD;AAAA,eAC/BA,SAAS,CAACC,KAAV,EAD+B;AAAA,OAAnC;AAGH,KAJD;AAKH,GANQ,EAMN,EANM,CAAT;AAQA,SAAO;AAAC3B,IAAAA,SAAS,EAATA,SAAD;AAAYE,IAAAA,KAAK,EAALA,KAAZ;AAAmBG,IAAAA,WAAW,EAAXA,WAAnB;AAAgCmB,IAAAA,UAAU,EAAVA;AAAhC,GAAP;AACH,CArDM;AAuDP,eAAezB,aAAf","sourcesContent":["import {useState, useCallback, useRef, useEffect} from 'react';\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(\n        async (url, method = 'GET', body = null, headers = {}) => {\n            setIsLoading(true);\n            const httpAbortCtrl = new AbortController();\n            activeHttpRequests.current.push(httpAbortCtrl);\n\n            try {\n                const response = await fetch(url, {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCtrl.signal\n                });\n\n                const responseData = await response.json();\n\n                activeHttpRequests.current = activeHttpRequests.current.filter(\n                    (reqCtrl) => reqCtrl !== httpAbortCtrl\n                );\n\n                if (!response.ok) {\n                    throw new Error(responseData.message);\n                }\n\n                setIsLoading(false);\n                return responseData;\n            } catch (err) {\n                setError(err.message);\n                setIsLoading(false);\n                throw err;\n            }\n        },\n        []\n    );\n\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach((abortCtrl) =>\n                abortCtrl.abort()\n            );\n        };\n    }, []);\n\n    return {isLoading, error, sendRequest, clearError};\n};\n\nexport default useHttpClient;\n"]},"metadata":{},"sourceType":"module"}